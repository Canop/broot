[
    ( ".scalafix.conf"             , "file_type_config"                   ),
    ( ".scalafmt.conf"             , "file_type_config"                   ),
    ( "LICENCE"                    , "file_type_license"                  ),
    ( "LICENSE"                    , "file_type_license"                  ),
    ( "VERSION"                    , "file_type_version"                  ),
    ( "licence"                    , "file_type_license"                  ),
    ( "license"                    , "file_type_license"                  ),
    ( "readme"                     , "file_type_text"                     ),
    ( "todo"                       , "file_type_todo"                     ),
    ( "version"                    , "file_type_version"                  ),
    ( "angular-cli.json"           , "file_type_angular"                  ),
    ( "angular.json"               , "file_type_angular"                  ),
    ( "api-extractor-base.json"    , "file_type_api_extractor"            ),
    ( "api-extractor.json"         , "file_type_api_extractor"            ),
    ( "app-routing.module.dart"    , "file_type_ng_routing_dart"          ),
    ( "app-routing.module.js"      , "file_type_ng_routing_js2"           ),
    ( "app-routing.module.ts"      , "file_type_ng_routing_ts2"           ),
    ( "app.config.js"              , "file_type_expo"                     ),
    ( "app.config.json"            , "file_type_expo"                     ),
    ( "app.config.json5"           , "file_type_expo"                     ),
    ( "app.json"                   , "file_type_expo"                     ),
    ( "appveyor.yml"               , "file_type_appveyor"                 ),
    ( "aurelia.json"               , "file_type_aurelia"                  ),
    ( "azure-pipelines.yml"        , "file_type_azurepipelines"           ),
    ( "bazel.rc"                   , "file_type_bazel"                    ),
    ( "berksfile"                  , "file_type_chef"                     ),
    ( "berksfile.lock"             , "file_type_chef"                     ),
    ( "bitbucket-pipelines.yml"    , "file_type_bitbucketpipeline"        ),
    ( "bower.json"                 , "file_type_bower"                    ),
    ( "browserslist"               , "file_type_browserslist"             ),
    ( "build.ninja"                , "file_type_ninja"                    ),
    ( "build.properties"           , "file_type_config"                   ),
    ( "cargo.lock"                 , "file_type_cargo"                    ),
    ( "cargo.toml"                 , "file_type_cargo"                    ),
    ( "checkstyle.json"            , "file_type_haxecheckstyle"           ),
    ( "chefignore"                 , "file_type_chef"                     ),
    ( "circle.yml"                 , "file_type_circleci"                 ),
    ( "codacy.yaml"                , "file_type_codacy"                   ),
    ( "codacy.yml"                 , "file_type_codacy"                   ),
    ( "codeclimate.yml"            , "file_type_codeclimate"              ),
    ( "codecov.yml"                , "file_type_codecov"                  ),
    ( "coffeelint.json"            , "file_type_coffeelint"               ),
    ( "commitlint.config.js"       , "file_type_commitlint"               ),
    ( "composer.json"              , "file_type_composer"                 ),
    ( "composer.lock"              , "file_type_composer"                 ),
    ( "conanfile.py"               , "file_type_conan"                    ),
    ( "conanfile.txt"              , "file_type_conan"                    ),
    ( "config.codekit"             , "file_type_codekit"                  ),
    ( "config.codekit2"            , "file_type_codekit"                  ),
    ( "config.codekit3"            , "file_type_codekit"                  ),
    ( "coveralls.yml"              , "file_type_coveralls"                ),
    ( "crowdin.yml"                , "file_type_crowdin"                  ),
    ( "csscomb.json"               , "file_type_csscomb"                  ),
    ( "dependabot.yml"             , "file_type_dependabot"               ),
    ( "dependencies.yml"           , "file_type_dependencies"             ),
    ( "devcontainer.json"          , "file_type_devcontainer"             ),
    ( "docker-compose.test.yml"    , "file_type_dockertest2"              ),
    ( "drone.yml"                  , "file_type_drone"                    ),
    ( "drone.yml.sig"              , "file_type_drone"                    ),
    ( "ejs.t"                      , "file_type_hygen"                    ),
    ( "elm-package.json"           , "file_type_elm2"                     ),
    ( "emakefile"                  , "file_type_erlang2"                  ),
    ( "emakerfile"                 , "file_type_erlang2"                  ),
    ( "eslint.config.js"           , "file_type_eslint"                   ),
    ( "eslint.config.cjs"          , "file_type_eslint"                   ),
    ( "eslint.config.mjs"          , "file_type_eslint"                   ),
    ( "favicon.ico"                , "file_type_favicon"                  ),
    ( "firebase.json"              , "file_type_firebasehosting"          ),
    ( "firestore.indexes.json"     , "file_type_firestore"                ),
    ( "firestore.rules"            , "file_type_firestore"                ),
    ( "format.ps1xml"              , "file_type_powershell_format"        ),
    ( "fuse.js"                    , "file_type_fusebox"                  ),
    ( "gemfile.lock"               , "file_type_bundler"                  ),
    ( "gitlab-ci.yml"              , "file_type_gitlab"                   ),
    ( "glide.yml"                  , "file_type_glide"                    ),
    ( "go.mod"                     , "file_type_go_package"               ),
    ( "go.sum"                     , "file_type_go_package"               ),
    ( "greenkeeper.json"           , "file_type_greenkeeper"              ),
    ( "guard.dart"                 , "file_type_ng_guard_dart"            ),
    ( "haxelib.json"               , "file_type_haxe"                     ),
    ( "husky.config.js"            , "file_type_husky"                    ),
    ( "include.xml"                , "file_type_lime"                     ),
    ( "integrity.json"             , "file_type_nsri-integrity"           ),
    ( "ionic.config.json"          , "file_type_ionic"                    ),
    ( "ionic.project"              , "file_type_ionic"                    ),
    ( "jade-lint.json"             , "file_type_pug"                      ),
    ( "jakefile"                   , "file_type_jake"                     ),
    ( "jakefile.js"                , "file_type_jake"                     ),
    ( "jasmine.json"               , "file_type_jasmine"                  ),
    ( "jbuilder"                   , "file_type_jbuilder"                 ),
    ( "jest.config.json"           , "file_type_jest"                     ),
    ( "jest.json"                  , "file_type_jest"                     ),
    ( "jestrc.js"                  , "file_type_jest"                     ),
    ( "jestrc.json"                , "file_type_jest"                     ),
    ( "jsconfig.json"              , "file_type_jsconfig"                 ),
    ( "jscpd.json"                 , "file_type_jscpd"                    ),
    ( "jsx.snap"                   , "file_type_jest_snapshot"            ),
    ( "kitchen.yml"                , "file_type_kitchenci"                ),
    ( "layout.htm"                 , "file_type_layout"                   ),
    ( "layout.html"                , "file_type_layout"                   ),
    ( "lerna.json"                 , "file_type_lerna"                    ),
    ( "lint-staged.config.js"      , "file_type_lintstagedrc"             ),
    ( "makefile"                   , "file_type_makefile"                 ),
    ( "manifest.bak"               , "file_type_manifest_bak"             ),
    ( "manifest.skip"              , "file_type_manifest_skip"            ),
    ( "markdownlint.json"          , "file_type_markdownlint"             ),
    ( "marko.js"                   , "file_type_markojs"                  ),
    ( "maven.config"               , "file_type_maven"                    ),
    ( "mocha.opts"                 , "file_type_mocha"                    ),
    ( "module.dart"                , "file_type_ng_module_dart"           ),
    ( "nest-cli.json"              , "file_type_nestjs"                   ),
    ( "nestconfig.json"            , "file_type_nestjs"                   ),
    ( "netlify.toml"               , "file_type_netlify"                  ),
    ( "next.config.js"             , "file_type_next"                     ),
    ( "ng-tailwind.js"             , "file_type_ng_tailwind"              ),
    ( "nginx.conf"                 , "file_type_nginx"                    ),
    ( "nodemon.json"               , "file_type_nodemon"                  ),
    ( "now.json"                   , "file_type_zeit"                     ),
    ( "npm-shrinkwrap.json"        , "file_type_npm"                      ),
    ( "nsri.config.js"             , "file_type_nsri"                     ),
    ( "nycrc.json"                 , "file_type_nyc"                      ),
    ( "package-lock.json"          , "file_type_npm"                      ),
    ( "package.json"               , "file_type_npm"                      ),
    ( "package.pins"               , "file_type_swift"                    ),
    ( "php_cs.dist"                , "file_type_phpcsfixer"               ),
    ( "phpunit.xml"                , "file_type_phpunit"                  ),
    ( "phpunit.xml.dist"           , "file_type_phpunit"                  ),
    ( "phraseapp.yml"              , "file_type_phraseapp"                ),
    ( "pipfile.lock"               , "file_type_pip"                      ),
    ( "platformio.ini"             , "file_type_platformio"               ),
    ( "pnpm-lock.yaml"             , "file_type_pnpm"                     ),
    ( "pnpm-workspace.yaml"        , "file_type_pnpm"                     ),
    ( "pnpmfile.js"                , "file_type_pnpm"                     ),
    ( "postcss.config.js"          , "file_type_postcssconfig"            ),
    ( "postcssrc.js"               , "file_type_postcssconfig"            ),
    ( "postcssrc.json"             , "file_type_postcssconfig"            ),
    ( "postcssrc.yml"              , "file_type_postcssconfig"            ),
    ( "pre-commit-config.yaml"     , "file_type_precommit"                ),
    ( "pubspec.lock"               , "file_type_flutter_package"          ),
    ( "pubspec.yaml"               , "file_type_flutter_package"          ),
    ( "pug-lintrc.js"              , "file_type_pug"                      ),
    ( "pug-lintrc.json"            , "file_type_pug"                      ),
    ( "pyup.yml"                   , "file_type_pyup"                     ),
    ( "quasar.conf.js"             , "file_type_quasar"                   ),
    ( "robots.txt"                 , "file_type_robots"                   ),
    ( "rubocop.yml"                , "file_type_rubocop"                  ),
    ( "rubocop_todo.yml"           , "file_type_rubocop"                  ),
    ( "serverless.yml"             , "file_type_serverless"               ),
    ( "snapcraft.yaml"             , "file_type_snapcraft"                ),
    ( "solidarity.json"            , "file_type_solidarity"               ),
    ( "stylish-haskell.yaml"       , "file_type_stylish_haskell"          ),
    ( "svelte.config.js"           , "file_type_svelte"                   ),
    ( "symfony.lock"               , "file_type_symfony"                  ),
    ( "tailwind.config.cjs"        , "file_type_tailwind"                 ),
    ( "tailwind.config.js"         , "file_type_tailwind"                 ),
    ( "testcaferc.json"            , "file_type_testcafe"                 ),
    ( "tox.ini"                    , "file_type_tox"                      ),
    ( "travis.yml"                 , "file_type_travis"                   ),
    ( "ts.snap"                    , "file_type_jest_snapshot"            ),
    ( "tslint.json"                , "file_type_tslint"                   ),
    ( "tslint.yaml"                , "file_type_tslint"                   ),
    ( "tslint.yml"                 , "file_type_tslint"                   ),
    ( "tsx.snap"                   , "file_type_jest_snapshot"            ),
    ( "types.ps1xml"               , "file_type_powershell_types"         ),
    ( "unibeautify.config.js"      , "file_type_unibeautify"              ),
    ( "vercel.json"                , "file_type_zeit"                     ),
    ( "vsts-ci.yml"                , "file_type_azurepipelines"           ),
    ( "vue.config.js"              , "file_type_vueconfig"                ),
    ( "wercker.yml"                , "file_type_wercker"                  ),
    ( "wpml-config.xml"            , "file_type_wpml"                     ),
    ( "yarn-metadata.json"         , "file_type_yarn"                     ),
    ( "yarn.lock"                  , "file_type_yarn"                     ),
    ( "yaspeller.json"             , "file_type_yandex"                   ),
    ( "yo-rc.json"                 , "file_type_yeoman"                   ),
]
